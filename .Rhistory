}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
best_predictor <- NULL
min_error <- Inf
# main oneR loop
for ( predictor in colnames(train.data)) {
# Skipping
if (!is.numeric(train.data[[predictor]]) || predictor == "Survived" || predictor == "ZeroR" || predictor == "Fare" || predictor == "Passengerid"|| predictor == "Age") {
next
}
# select classes in predictor
unique_classes <- unique(train.data[[predictor]])
min_pre_error <- 0
# Iterate over classes
for (class_value in unique_classes) {
# calc. each class error and sum
class_freq <- sort(table(train.data[train.data[[predictor]] == class_value,'Survived']), decreasing = TRUE)
error <- sum(class_freq[-1])
cat("predictor class: ",predictor,class_value , "error: ",error, "\n")
min_pre_error <- min_pre_error + error
cat("predictor total: ",min_pre_error, "\n")
}
#cat(min_pre_error)
# Updating predictor
#cat(min_pre_error < min_error)
if (min_pre_error < min_error) {
best_predictor <- predictor
min_error <- min_pre_error
}
}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
# test
cat(table(train.data[train.data[['Fare_Range']] == '0','Survived']))
zero_r_predictions <- rep(majority, nrow(train.data))
# One-R classifier
one_r_rule <- tapply(train.data$Survived, train.data$Fare_Range, function(x) {
table(x)[which.max(table(x))]
})
one_r_predictions <- rep(one_r_rule, nrow(train.data))
# Combine predictions and actual 'Survived' values in a new dataframe
predictions_df <- data.frame(
Actual = train.data$Survived,
Zero_R_Predictions = zero_r_predictions,
One_R_Predictions = one_r_predictions
)
# Load ggplot2 library
library(ggplot2)
# Reshape the dataframe for plotting
library(tidyr)
predictions_long <- gather(predictions_df, Classifier, Predictions, -Actual)
# Create a bar plot
ggplot(predictions_long, aes(x = Classifier, fill = factor(Predictions))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Zero-R and One-R Predictions",
x = "Classifier",
y = "Count",
fill = "Predicted") +
theme_minimal()
print(one_r_predictions)
rep(majority, nrow(train.data))
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(fare_breaks), by = 1), labels = fare_breaks) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(unique(train.data$Fare_Range)), by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(1, length(unique(train.data$Fare_Range)), by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(unique(train.data$Fare_Range)) + 1, by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(unique(train.data$Fare_Range)) - 1, by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
ggplot(train.data, aes(x = sort(Fare_Range), fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(unique(train.data$Fare_Range)) - 1, by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(unique(train.data$Fare_Range)) - 1, by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(labels = unique(train.data$Fare_Range_Labels)) +
theme_minimal()
custom_labels <- paste0(fare_breaks[(factor(train.data$Fare_Range_Labels, levels = unique(train.data$Fare_Range_Labels))
) * 5], ":", fare_breaks[factor(train.data$Fare_Range_Labels, levels = unique(train.data$Fare_Range_Labels))
* 5 + 5], " years")
best_predictor <- NULL
min_error <- Inf
# main one R loop
for ( predictor in colnames(train.data)) {
# Skipping
if (!is.numeric(train.data[[predictor]]) || predictor == "Survived" || predictor == "ZeroR" || predictor == "Fare" || predictor == "Passengerid"|| predictor == "Age") {
next
}
# select classes in predictor
unique_classes <- unique(train.data[[predictor]])
min_pre_error <- 0
# Iterate over classes
for (class_value in unique_classes) {
# calc. each class error and sum
class_freq <- sort(table(train.data[train.data[[predictor]] == class_value,'Survived']), decreasing = TRUE)
error <- sum(class_freq[-1])
cat("predictor class: ",predictor,class_value , "error: ",error, "\n")
min_pre_error <- min_pre_error + error
cat("predictor total: ",min_pre_error, "\n")
}
#cat(min_pre_error)
# Updating predictor
#cat(min_pre_error < min_error)
if (min_pre_error < min_error) {
best_predictor <- predictor
min_error <- min_pre_error
}
}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
best_predictor <- NULL
min_error <- Inf
# main one R loop
for ( predictor in colnames(train.data)) {
# Skipping
if (!is.numeric(train.data[[predictor]]) || predictor == "Survived" || predictor == "ZeroR" || predictor == "Fare" || predictor == "Passengerid"|| predictor == "Age") {
next
}
# select classes in predictor
unique_classes <- unique(train.data[[predictor]])
min_pre_error <- 0
# Iterate over classes
for (class_value in unique_classes) {
# calc. each class error and sum
class_freq <- sort(table(train.data[train.data[[predictor]] == class_value,'Survived']), decreasing = TRUE)
error <- sum(class_freq[-1])
cat("predictor class: ",predictor,class_value , "error: ",error, "\n")
min_pre_error <- min_pre_error + error
cat("predictor total for class ",class_value," = ",min_pre_error, "\n")
}
#cat(min_pre_error)
# Updating predictor
#cat(min_pre_error < min_error)
if (min_pre_error < min_error) {
best_predictor <- predictor
min_error <- min_pre_error
}
}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
#Categorizing the numerical large values into groups
age_breaks <- seq(0, 100, by = 5)
fare_breaks <- seq(0, 1000, by = 50)
# Create age ranges
train.data$Age_Range <- cut(train.data$Age, breaks = age_breaks, labels = FALSE)
train.data$Fare_Range <- cut(train.data$Fare, breaks = fare_breaks, labels = FALSE)
best_predictor <- NULL
min_error <- Inf
# main one R loop
for ( predictor in colnames(train.data)) {
# Skipping
if (!is.numeric(train.data[[predictor]]) || predictor == "Survived" || predictor == "ZeroR" || predictor == "Fare" || predictor == "Passengerid"|| predictor == "Age") {
next
}
# select classes in predictor
unique_classes <- unique(train.data[[predictor]])
min_pre_error <- 0
# Iterate over classes
for (class_value in unique_classes) {
# calc. each class error and sum
class_freq <- sort(table(train.data[train.data[[predictor]] == class_value,'Survived']), decreasing = TRUE)
error <- sum(class_freq[-1])
cat("predictor class: ",predictor,class_value , "error: ",error, "\n")
min_pre_error <- min_pre_error + error
cat("predictor ",predictor," total for class ",class_value," = ",min_pre_error, "\n")
}
#cat(min_pre_error)
# Updating predictor
#cat(min_pre_error < min_error)
if (min_pre_error < min_error) {
best_predictor <- predictor
min_error <- min_pre_error
}
}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
View(test.data)
View(train_and_test)
View(train.data)
View(train.data)
View(train.data)
View(train.data)
View(train.data)
View(train.data)
View(train.data)
# saving files
write.csv(train.data, "train_data.csv", row.names = FALSE)
write.csv(test.data, "train_data.csv", row.names = FALSE)
# saving files
write.csv(train.data, "train_data.csv", row.names = FALSE)
write.csv(test.data, "test_data.csv", row.names = FALSE)
majority <- as.numeric(names(sort(table(train.data$Survived), decreasing = FALSE ))[2])
zero_r_predictions <- rep(majority, nrow(train.data))
# calculating the accuracy using mean of a logical vector creating by comparing the actual survived and the predictions
zero_r_accuracy <- mean(zero_r_predictions == train.data$Survived)
# Print the accuracy
cat("Accuracy of Zero-R Classifier:", zero_r_accuracy, "\n")
# updating the zero r column
train.data$ZeroR <- zero_r_predictions
cat("The Zero R classifier prediction is: ",majority)
# adding prediction to table
zero_r_predictions <- rep(majority, nrow(train.data))
# calculating the accuracy
zero_r_accuracy <- mean(zero_r_predictions == train.data$Survived)
# Print the accuracy
cat("Accuracy of Zero-R Classifier:", zero_r_accuracy, "\n")
train.data <- read.csv("train_data.csv")
View(train.data)
majority <- as.numeric(names(sort(table(train.data$Survived), decreasing = FALSE ))[2])
cat("The Zero R classifier prediction is: ",majority)
# adding prediction to table
zero_r_predictions <- rep(majority, nrow(train.data))
# updating the zero r column
train.data$ZeroR <- zero_r_predictions
# calculating the accuracy
zero_r_accuracy <- mean(zero_r_predictions == train.data$Survived)
# Print the accuracy
cat("Accuracy of Zero-R Classifier:", zero_r_accuracy, "\n")
train.data <- read.csv("train_data.csv")
View(train.data)
majority <- as.numeric(names(sort(table(train.data$Survived), decreasing = FALSE ))[2])
cat("The Zero R classifier prediction is: ",majority)
# adding prediction to table
zero_r_predictions <- rep(majority, nrow(train.data))
# updating the zero r column
train.data$ZeroR <- zero_r_predictions
# calculating the accuracy
zero_r_accuracy <- mean(zero_r_predictions == train.data$Survived)
# Print the accuracy
cat("Accuracy of Zero-R Classifier:", zero_r_accuracy, "\n")
write.csv(train.data, "train_data.csv", row.names = FALSE)
train.data <- read.csv("train_data.csv")
#Categorizing the numerical large values into groups
age_breaks <- seq(0, 100, by = 5)
fare_breaks <- seq(0, 1000, by = 50)
# Create age ranges
train.data$Age_Range <- cut(train.data$Age, breaks = age_breaks, labels = FALSE)
train.data$Fare_Range <- cut(train.data$Fare, breaks = fare_breaks, labels = FALSE)
best_predictor <- NULL
min_error <- Inf
# main one R loop
for ( predictor in colnames(train.data)) {
# Skipping
if (!is.numeric(train.data[[predictor]]) || predictor == "Survived" || predictor == "ZeroR" || predictor == "Fare" || predictor == "Passengerid"|| predictor == "Age") {
next
}
# select classes in predictor
unique_classes <- unique(train.data[[predictor]])
min_pre_error <- 0
# Iterate over classes
for (class_value in unique_classes) {
# calc. each class error and sum
class_freq <- sort(table(train.data[train.data[[predictor]] == class_value,'Survived']), decreasing = TRUE)
error <- sum(class_freq[-1])
cat("predictor class: ",predictor,class_value , "error: ",error, "\n")
min_pre_error <- min_pre_error + error
cat("predictor ",predictor," total for class ",class_value," = ",min_pre_error, "\n")
}
#cat(min_pre_error)
# Updating predictor
#cat(min_pre_error < min_error)
if (min_pre_error < min_error) {
best_predictor <- predictor
min_error <- min_pre_error
}
}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
write.csv(train.data, "train_data.csv", row.names = FALSE)
# bar plot
ggplot(predictions_long, aes(x = Classifier, fill = factor(Predictions))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Zero-R and One-R Predictions",
x = "Classifier",
y = "Count",
fill = "Predicted") +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(labels = custom_labels) +
theme_minimal()
# plot
library(ggplot2)
library(tidyr)
predictions_long <- gather(predictions_df, Classifier, Predictions, -Actual)
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(labels = custom_labels) +
theme_minimal()
train.data <- read.csv("train_data.csv")
View(train.data)
majority <- as.numeric(names(sort(table(train.data$Survived), decreasing = FALSE ))[2])
cat("The Zero R classifier prediction is: ",majority)
# adding prediction to table
zero_r_predictions <- rep(majority, nrow(train.data))
# updating the zero r column
train.data$ZeroR <- zero_r_predictions
# calculating the accuracy
zero_r_accuracy <- mean(zero_r_predictions == train.data$Survived)
# Print the accuracy
cat("Accuracy of Zero-R Classifier:", zero_r_accuracy, "\n")
write.csv(train.data, "train_data.csv", row.names = FALSE)
train.data <- read.csv("train_data.csv")
#Categorizing the numerical large values into groups
age_breaks <- seq(0, 100, by = 5)
fare_breaks <- seq(0, 1000, by = 50)
# Create age ranges
train.data$Age_Range <- cut(train.data$Age, breaks = age_breaks, labels = FALSE)
train.data$Fare_Range <- cut(train.data$Fare, breaks = fare_breaks, labels = FALSE)
best_predictor <- NULL
min_error <- Inf
# main one R loop
for ( predictor in colnames(train.data)) {
# Skipping
if (!is.numeric(train.data[[predictor]]) || predictor == "Survived" || predictor == "ZeroR" || predictor == "Fare" || predictor == "Passengerid"|| predictor == "Age") {
next
}
# select classes in predictor
unique_classes <- unique(train.data[[predictor]])
min_pre_error <- 0
# Iterate over classes
for (class_value in unique_classes) {
# calc. each class error and sum
class_freq <- sort(table(train.data[train.data[[predictor]] == class_value,'Survived']), decreasing = TRUE)
error <- sum(class_freq[-1])
cat("predictor class: ",predictor,class_value , "error: ",error, "\n")
min_pre_error <- min_pre_error + error
cat("predictor ",predictor," total for class ",class_value," = ",min_pre_error, "\n")
}
#cat(min_pre_error)
# Updating predictor
#cat(min_pre_error < min_error)
if (min_pre_error < min_error) {
best_predictor <- predictor
min_error <- min_pre_error
}
}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
write.csv(train.data, "train_data.csv", row.names = FALSE)
# plot for draft
library(ggplot2)
library(tidyr)
predictions_long <- gather(predictions_df, Classifier, Predictions, -Actual)
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(labels = custom_labels) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(labels = unique(train.data$Fare_Range_Labels)) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(breaks = seq(0, length(unique(train.data$Fare_Range)), by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(breaks = seq(0, length(unique(train.data$Fare_Range)) -1, by = 1),
labels = unique(train.data$Fare_Range)) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_discrete(breaks = seq(0, length(fare_breaks), by = 1), labels = fare_breaks) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(fare_breaks), by = 1), labels = fare_breaks) +
theme_minimal()
ggplot(train.data, aes(x = Fare_Range, fill = factor(Survived))) +
geom_bar(position = "dodge", color = "black") +
labs(title = "Survival Counts by Fare Range",
x = "Fare Range",
y = "Count",
fill = "Survived") +
scale_x_continuous(breaks = seq(0, length(fare_breaks) -1 , by = 1), labels = fare_breaks) +
theme_minimal()
train.data <- read.csv("train_data.csv")
#Categorizing the numerical large values into groups
age_breaks <- seq(0, 100, by = 5)
fare_breaks <- seq(0, 1000, by = 50)
# Create age ranges
train.data$Age_Range <- cut(train.data$Age, breaks = age_breaks, labels = FALSE)
train.data$Fare_Range <- cut(train.data$Fare, breaks = fare_breaks, labels = FALSE)
best_predictor <- NULL
min_error <- Inf
# main one R loop
for ( predictor in colnames(train.data)) {
# Skipping
if (!is.numeric(train.data[[predictor]]) || predictor == "Survived" || predictor == "ZeroR" || predictor == "Fare" || predictor == "Passengerid"|| predictor == "Age") {
next
}
# select classes in predictor
unique_classes <- unique(train.data[[predictor]])
min_pre_error <- 0
# Iterate over classes
for (class_value in unique_classes) {
# calc. each class error and sum
class_freq <- sort(table(train.data[train.data[[predictor]] == class_value,'Survived']), decreasing = TRUE)
error <- sum(class_freq[-1])
cat("predictor class: ",predictor,class_value , "error: ",error, "\n")
min_pre_error <- min_pre_error + error
cat("predictor ",predictor," total for class ",class_value," = ",min_pre_error, "\n")
}
#cat(min_pre_error)
# Updating predictor
#cat(min_pre_error < min_error)
if (min_pre_error < min_error) {
best_predictor <- predictor
min_error <- min_pre_error
}
}
# Print the best pridector
cat("Best Predictor for One-R Classifier:", best_predictor, "\n")
cat("Min. Total Error:", min_error, "\n")
